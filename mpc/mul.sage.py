

# This file was *autogenerated* from the file mul.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
load('share.sage')
load('beaver.sage')
import random

party0_val = _sage_const_2 
party1_val = _sage_const_3 
source = Source(p)

# additive share distribution, and communication of private values
party0_random = K(_sage_const_3 )
alpha1 = AuthenticatedShare(party0_random, source, _sage_const_0 )
alpha2 = AuthenticatedShare(party0_val - party0_random, source, _sage_const_0 )
assert (alpha1.authenticated_open(alpha2) == party0_val)

party1_random = K(_sage_const_3 )
beta1 = AuthenticatedShare(party1_random, source, _sage_const_1 )
beta2 = AuthenticatedShare(party1_val - party1_random, source, _sage_const_1 )
assert (beta1.authenticated_open(beta2) == party1_val)

a1b1 = MultiplicationAuthenticatedShares(alpha1, beta1, source.triplet(_sage_const_0 ), _sage_const_0 )
a2b2 = MultiplicationAuthenticatedShares(alpha2, beta2, source.triplet(_sage_const_1 ), _sage_const_1 )
lhs = a1b1.mul(a2b2.d, a2b2.e)
rhs = a2b2.mul(a1b1.d, a1b1.e)
res = lhs.authenticated_open(rhs)

assert (res == party0_val*party1_val), 'mul: {}, expected mul: {}'.format(res, party0_val*party1_val)

